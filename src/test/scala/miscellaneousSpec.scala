import java.text._
import java.util.Calendar

import org.scalatest._

import miscellaneous._

class MiscellaneousSpec extends FlatSpec with Matchers {
  "P90" should "place 8 queens" in {
    val solutions = (new S99M()).eightQueens
    solutions.size should be (92)
    solutions.toSet.intersect(Set(List(0,4,7,5,2,6,1,3))).size should be (1)
    //println(solutions(0))
    //println(solutions.size)
    //List(0, 4, 7, 5, 2, 6, 1, 3)
    //   0 1 2 3 4 5 6 7
    // 0 x
    // 1             x
    // 2         x
    // 3               x
    // 4   x
    // 5       x
    // 6           x
    // 7    x
  }
  "P91" should "find the knight's tour" in {
    val solution = (new S99M()).knightsTour
    solution.size should be (64)
    solution.toSet.size should be (64)
  }
  "P97" should "solve Sudoku" in {
    val solution = (new S99M()).solveSudoku(List(
      List(0, 0, 4, 8, 0, 0, 0, 1, 7),
      List(6, 7, 0, 9, 0, 0, 0, 0, 0),
      List(5, 0, 8, 0, 3, 0, 0, 0, 4),
      List(3, 0, 0, 7, 4, 0, 1, 0, 0),
      List(0, 6, 9, 0, 0, 0, 7, 8, 0),
      List(0, 0, 1, 0, 6, 9, 0, 0, 5),
      List(1, 0, 0, 0, 8, 0, 3, 0, 6),
      List(0, 0, 0, 0, 0, 6, 0, 9, 1),
      List(2, 4, 0, 0, 0, 1, 5, 0, 0)
    ))
    solution.flatten.toSet.size should be (9)
  }
  "P99" should "solveCrossword" in {
    (new S99M()).solveCrossword(
      List("CAT", "AN"),
      List(
        List(".", ".", "."),
        List(" ", ".", " ")
      )
    ) should be (List(
      List("C", "A", "T"),
      List(" ", "N", " ")
    ))
    if (true) {
      (new S99M()).solveCrossword(
        List("CCAA", "BACA", "BAAA", "BBBB"),
        List(
          List(".", " ", ".", " "),
          List(".", ".", ".", "."),
          List(".", " ", ".", " "),
          List(".", ".", ".", ".")
      )) should be (List(
        List("B", " ", "C", " "),
        List("B", "A", "C", "A"),
        List("B", " ", "A", " "),
        List("B", "A", "A", "A")
      ))
      (new S99M()).solveCrossword(
        List(
          "LINUX", "PROLOG", "PERL", "ONLINE", "GNU",
          "XML",   "NFS",    "SQL",  "EMACS",  "WEB",
          "MAC"
        ), List(
          List(".", ".", ".", ".", ".", ".", " ", " ", "."),
          List(".", " ", ".", " ", " ", ".", " ", " ", "."),
          List(".", " ", ".", ".", ".", ".", ".", " ", "."),
          List(".", " ", ".", " ", ".", " ", ".", ".", "."),
          List(" ", " ", ".", " ", ".", ".", ".", " ", "."),
          List(" ", ".", ".", ".", " ", " ", " ", " ", " ")
        )
      ) should be (List(
        List("P", "R", "O", "L", "O", "G", " ", " ", "E"),
        List("E", " ", "N", " ", " ", "N", " ", " ", "M"),
        List("R", " ", "L", "I", "N", "U", "X", " ", "A"),
        List("L", " ", "I", " ", "F", " ", "M", "A", "C"),
        List(" ", " ", "N", " ", "S", "Q", "L", " ", "S"),
        List(" ", "W", "E", "B", " ", " ", " ", " ", " ")
      ))
    }
    if (false) {
      val t0 = Calendar.getInstance().getTime()
      val timeFormatter = new SimpleDateFormat("hh:mm:ss")
      println(timeFormatter.format(t0))
      (new S99M()).solveCrossword(
        List(
          "AAL",          "DER",           "TAL",           "TAT",         "ISEL",
          "TELL",         "ZANK",          "ZEUS",          "ALSEN",       "BLASE",
          "EOSIN",        "ETTAL",         "KARRE",         "LIANE",       "NEEFS",
          "NONNE",        "OSTEN",         "STUHL",         "TIARA",       "ANKARA",
          "EGERIA",       "GRANAT",        "HIRTEN",        "MISERE",      "SAMPAN",
          "TILSIT",       "WAGGON",        "FORTUNA",       "ITALIEN",     "MADONNA",
          "MELASSE",      "REAUMUR",       "RIVIERA",       "SEKUNDE",     "SERBIEN",
          "SKELETT",      "SKRUPEL",       "STETTIN",       "STOIKER",     "HANNIBAL",
          "REGISTER",     "RELIGION",      "STANNIOL",      "TRUEFFEL",    "UNTERTAN",
          "USAMBARA",     "VENDETTA",      "TUEBINGEN",     "TURKMENEN",   "ALLENSTEIN",
          "ATTRAKTION",   "BRIEFTAUBE",    "TATTERSALL",    "PROTEKTORAT", "TEMPERAMENT",
          "KRANKENKASSE", "CHRONOGRAPHIE", "TRAUBENZUCKER", "WALZER"
        ), List(
          List(".", " ", ".", ".", ".", ".", ".", ".", ".", ".", ".", " ", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."),
          List(".", " ", ".", " ", " ", " ", " ", " ", " ", " ", ".", " ", ".", " ", " ", " ", " ", " ", " ", " ", " ", " ", ".", " ", "."),
          List(".", " ", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", " ", " ", " ", ".", ".", ".", ".", ".", ".", ".", " ", "."),
          List(".", " ", ".", " ", " ", " ", " ", " ", " ", " ", ".", " ", " ", " ", " ", " ", " ", " ", ".", " ", " ", " ", ".", " ", "."),
          List(".", ".", ".", ".", ".", ".", " ", ".", ".", ".", ".", " ", ".", " ", ".", ".", ".", ".", ".", ".", " ", " ", ".", " ", "."),
          List(".", " ", ".", " ", " ", " ", " ", " ", " ", " ", " ", " ", ".", " ", ".", " ", " ", " ", ".", " ", " ", " ", ".", " ", "."),
          List(".", " ", ".", " ", ".", ".", ".", ".", ".", ".", " ", " ", ".", ".", ".", ".", ".", " ", ".", ".", ".", ".", ".", ".", "."),
          List(".", " ", ".", " ", ".", " ", " ", ".", " ", " ", ".", ".", ".", " ", ".", " ", " ", " ", ".", " ", " ", " ", ".", " ", " "),
          List(".", ".", ".", ".", ".", ".", ".", ".", " ", " ", ".", " ", " ", " ", ".", " ", " ", " ", ".", " ", ".", ".", ".", ".", "."),
          List(".", " ", ".", " ", ".", " ", " ", ".", " ", " ", ".", " ", " ", " ", ".", " ", ".", " ", " ", " ", ".", " ", ".", " ", " "),
          List(".", " ", " ", " ", ".", " ", " ", " ", " ", " ", ".", " ", ".", ".", ".", ".", ".", ".", ".", " ", ".", " ", ".", " ", " "),
          List(" ", ".", ".", ".", ".", ".", ".", " ", " ", " ", ".", " ", " ", " ", ".", " ", ".", " ", " ", ".", ".", ".", ".", ".", " "),
          List(" ", " ", ".", " ", " ", " ", " ", " ", ".", " ", ".", " ", " ", " ", " ", " ", ".", " ", " ", " ", ".", " ", " ", " ", "."),
          List(" ", " ", ".", " ", " ", ".", ".", ".", ".", ".", ".", ".", ".", ".", " ", ".", ".", ".", ".", ".", ".", ".", ".", " ", "."),
          List(" ", " ", ".", " ", ".", " ", ".", " ", ".", " ", ".", " ", " ", " ", " ", " ", ".", " ", " ", " ", " ", " ", ".", " ", "."),
          List(" ", ".", ".", ".", ".", " ", ".", " ", ".", " ", " ", ".", " ", ".", ".", ".", ".", ".", ".", ".", " ", " ", ".", " ", "."),
          List(".", " ", ".", " ", ".", " ", ".", " ", ".", " ", " ", ".", " ", " ", " ", ".", " ", " ", " ", " ", ".", ".", ".", " ", "."),
          List(".", " ", ".", " ", ".", " ", ".", " ", ".", " ", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", " ", " ", ".", " ", "."),
          List(".", ".", ".", ".", ".", " ", ".", " ", ".", " ", " ", ".", " ", " ", " ", ".", " ", " ", " ", " ", ".", " ", ".", " ", "."),
          List(".", " ", " ", " ", " ", " ", ".", " ", " ", " ", " ", ".", " ", ".", ".", ".", " ", ".", " ", " ", ".", " ", ".", " ", "."),
          List(".", " ", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", " ", " ", ".", " ", " ", ".", " ", " ", ".", " ", ".", " ", "."),
          List(".", " ", ".", " ", " ", " ", " ", ".", " ", " ", " ", " ", " ", " ", ".", " ", " ", ".", " ", " ", ".", " ", ".", " ", "."),
          List(".", ".", ".", ".", ".", " ", " ", ".", ".", ".", ".", ".", ".", ".", ".", " ", ".", ".", ".", ".", ".", ".", ".", " ", "."),
          List(" ", " ", ".", " ", " ", " ", " ", ".", " ", " ", " ", " ", " ", " ", ".", " ", " ", ".", " ", " ", ".", " ", " ", " ", "."),
          List(".", ".", ".", ".", ".", ".", ".", ".", " ", " ", " ", ".", ".", ".", ".", ".", ".", ".", " ", " ", ".", ".", ".", ".", ".")
        )
      )
      val t1 = Calendar.getInstance().getTime()
      println(timeFormatter.format(t1))
    }
    if (false) {
      val t2 = Calendar.getInstance().getTime()
      val timeFormatter = new SimpleDateFormat("hh:mm:ss")
      println(timeFormatter.format(t2))
      (new S99M()).solveCrossword(
        List(
          "BANI",       "HAUS",       "NETZ",       "LENA",       "ANKER",
          "ARIEL",      "GASSE",      "INNEN",      "ORADE",      "SESAM",
          "SIGEL",      "ANGOLA",     "AZETAT",     "EKARTE",     "NATTER",
          "NENNER",     "NESSEL",     "RITTER",     "SOMMER",     "TAUNUS",
          "TRANIG",     "AGENTUR",    "ERRATEN",    "ERREGER",    "GELEISE",
          "HAENDEL",    "KAROSSE",    "MANAGER",    "OSTEREI",    "SIDERIT",
          "TERRIER",    "ANATOMIE",   "ANPASSEN",   "BARKASSE",   "BEDANKEN",
          "DEKADENT",   "EINLADEN",   "ERLASSEN",   "FRAGMENT",   "GARANTIE",
          "KRAWATTE",   "MEISTERN",   "REAKTION",   "TENTAKEL",   "TRIANGEL",
          "UEBERALL",   "VERGEBEN",   "AFRIKANER",  "BESTELLEN",  "BULLAUGEN",
          "SANTANDER",  "VERBERGEN",  "ALLENSTEIN", "AUSTRALIEN", "BETEILIGEN",
          "NATALITAET", "OBERHAUSEN", "UNTERSTAND", "LEUMUND"
        ), List(
          List(".", ".", ".", ".", ".", ".", ".", ".", " ", ".", ".", ".", ".", ".", ".", ".", ".", " ", ".", ".", ".", ".", ".", ".", "."),
          List(".", " ", " ", " ", ".", " ", " ", " ", " ", ".", " ", " ", " ", ".", " ", " ", " ", " ", ".", " ", ".", " ", " ", " ", "."),
          List(".", " ", ".", " ", ".", " ", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", " ", " ", ".", " ", ".", " ", " ", " ", "."),
          List(".", ".", ".", ".", ".", ".", ".", " ", " ", ".", " ", " ", " ", ".", " ", ".", " ", ".", ".", ".", ".", ".", ".", ".", "."),
          List(".", " ", ".", " ", ".", " ", ".", " ", " ", ".", " ", ".", " ", ".", " ", ".", " ", " ", ".", " ", ".", " ", ".", " ", "."),
          List(".", " ", ".", " ", ".", " ", ".", " ", ".", ".", ".", ".", ".", ".", " ", ".", " ", " ", " ", " ", ".", " ", ".", " ", "."),
          List(".", " ", ".", " ", ".", " ", ".", " ", " ", " ", " ", ".", " ", ".", ".", ".", ".", ".", ".", ".", ".", " ", ".", " ", " "),
          List(".", " ", ".", " ", ".", ".", ".", ".", ".", ".", " ", ".", " ", ".", " ", ".", " ", ".", " ", " ", ".", " ", ".", " ", "."),
          List(".", " ", ".", " ", " ", ".", " ", " ", ".", " ", " ", ".", " ", " ", " ", ".", " ", ".", " ", " ", " ", " ", ".", " ", "."),
          List(".", ".", ".", ".", ".", ".", " ", " ", ".", ".", ".", ".", ".", ".", " ", ".", " ", ".", " ", ".", ".", ".", ".", ".", "."),
          List(" ", " ", " ", " ", " ", ".", " ", " ", ".", " ", " ", ".", " ", ".", " ", ".", " ", ".", " ", ".", " ", " ", ".", " ", "."),
          List(".", ".", ".", ".", ".", ".", ".", " ", ".", " ", " ", ".", " ", ".", " ", ".", ".", ".", ".", ".", ".", ".", " ", " ", "."),
          List(".", " ", " ", " ", " ", ".", " ", " ", ".", " ", " ", " ", " ", ".", " ", " ", " ", " ", " ", ".", " ", " ", " ", " ", "."),
          List(".", " ", ".", " ", " ", ".", ".", ".", ".", ".", ".", ".", " ", ".", ".", ".", ".", ".", ".", ".", ".", " ", " ", " ", "."),
          List(".", " ", ".", " ", " ", " ", " ", " ", ".", " ", " ", " ", " ", ".", " ", " ", " ", " ", ".", " ", " ", " ", " ", " ", "."),
          List(".", ".", ".", ".", ".", ".", " ", ".", " ", ".", ".", ".", ".", ".", ".", ".", " ", ".", ".", ".", ".", ".", ".", ".", "."),
          List(".", " ", ".", " ", " ", " ", " ", ".", " ", ".", " ", " ", " ", " ", " ", " ", " ", " ", ".", " ", ".", " ", " ", " ", "."),
          List(".", " ", ".", " ", ".", ".", ".", ".", ".", ".", ".", ".", ".", " ", " ", " ", ".", " ", ".", " ", ".", " ", " ", " ", " "),
          List(".", " ", ".", " ", " ", " ", " ", ".", " ", ".", " ", " ", ".", " ", " ", " ", ".", " ", ".", " ", ".", ".", ".", ".", "."),
          List(" ", " ", ".", " ", " ", " ", " ", ".", " ", " ", ".", ".", ".", ".", ".", ".", ".", " ", ".", " ", ".", " ", " ", " ", "."),
          List(".", ".", ".", ".", ".", ".", ".", ".", ".", ".", " ", " ", ".", " ", " ", " ", ".", " ", " ", " ", " ", ".", " ", " ", "."),
          List(".", " ", ".", " ", " ", " ", " ", ".", " ", " ", ".", " ", " ", ".", ".", ".", ".", ".", ".", ".", ".", ".", " ", " ", "."),
          List(".", " ", " ", ".", ".", ".", ".", ".", ".", ".", ".", ".", " ", ".", " ", " ", ".", " ", " ", " ", " ", ".", " ", " ", "."),
          List(".", " ", " ", " ", " ", " ", " ", ".", " ", " ", ".", " ", " ", ".", " ", " ", ".", " ", " ", " ", " ", ".", " ", " ", "."),
          List(".", ".", ".", ".", ".", ".", ".", ".", " ", " ", ".", ".", ".", ".", ".", ".", ".", ".", ".", " ", ".", ".", ".", ".", ".")
        )
      ) should be (List())
      val t3 = Calendar.getInstance().getTime()
      println(timeFormatter.format(t3))
    }
  }
}
